# Makefile for building the Flecs Wasm Component

# --- Configuration -----------------------------------------------------------
# Path to the WASI SDK. Update this if it's in a different location.
WASI_SDK_PATH ?= /home/ayanami/wasi-sdk-25.0-x86_64-linux

# Tools
CC = $(WASI_SDK_PATH)/bin/clang
WIT_BINDGEN = wit-bindgen

# --- Flags -------------------------------------------------------------------
# CFLAGS: Flags for the C compiler
# -g: Include DWARF debug information for lldb
# -I./include: Add the 'include' directory to the header search path
# -DFLECS_USE_OS_ALLOC: Use standard malloc/free, which is correct for WASI.
# -D_WASI_EMULATED_PTHREAD: Enable the WASI SDK's stubbed, single-threaded
#                           implementations of pthread functions. This allows
#                           Flecs's core modules (System, Pipeline) to compile
#                           without causing errors.
CFLAGS = -g -I. -I./include -U__STDC_LIB_EXT1__ -DECS_TARGET_POSIX -DECS_TARGET_WASMTIME -DFLECS_CUSTOM_BUILD -DFLECS_META

# -DFLECS_NO_HTTP -DFLECS_NO_REST -D_WASI_EMULATED_PTHREAD -DFLECS_USE_OS_ALLOC -DFLECS_NO_CPP

LDFLAGS = -lwasi-emulated-pthread \
          -Wl,--max-memory=16777216 \
          -Wl,--export-dynamic \
          -Wl,--allow-undefined \
          -Wl,--no-entry

# --- File Definitions --------------------------------------------------------
# Source files for your component's logic and the Flecs library
COMPONENT_IMPL_SRC = flecs_component.c
FLECS_LIB_SRC = distr/flecs.c
WIT_GENERATED_C_SRC = flecs_world.c

# Object files to be compiled from the sources above
COMPONENT_IMPL_OBJ = $(COMPONENT_IMPL_SRC:.c=.o)
FLECS_LIB_OBJ = $(FLECS_LIB_SRC:.c=.o)
WIT_GENERATED_C_OBJ = $(WIT_GENERATED_C_SRC:.c=.o)

# The special component type object file generated by wit-bindgen
WIT_GENERATED_COMPONENT_TYPE_OBJ = flecs_world_component_type.o

# All object files that need to be linked into the final component
ALL_OBJS = $(COMPONENT_IMPL_OBJ) $(FLECS_LIB_OBJ) $(WIT_GENERATED_C_OBJ) $(WIT_GENERATED_COMPONENT_TYPE_OBJ)

# Header file generated by wit-bindgen, used as a dependency
WIT_GENERATED_H = flecs_world.h

# The final WebAssembly component file
TARGET_WASM = flecs.wasm

# --- Build Rules -------------------------------------------------------------
.PHONY: all clean

# Default target: build the final .wasm component
all: $(TARGET_WASM)

# Rule to link the final wasm component from all pre-compiled object files.
$(TARGET_WASM): $(ALL_OBJS)
	@echo "==> Linking final component: $(TARGET_WASM)"
	$(CC) -o $@ -mexec-model=reactor --target=wasm32-wasi $(ALL_OBJS) $(LDFLAGS)
	@echo "==> Build complete!"

# Rule to generate C source, header, and the component type object from the .wit file.
$(WIT_GENERATED_C_SRC) $(WIT_GENERATED_H) $(WIT_GENERATED_COMPONENT_TYPE_OBJ): flecs.wit
	@echo "==> Generating bindings from flecs.wit"
	$(WIT_BINDGEN) c flecs.wit

# Generic rule to compile any .c file into a .o file.
%.o: %.c $(WIT_GENERATED_H)
	@echo "==> Compiling $< -> $@"
	$(CC) $(CFLAGS) -c $< -o $@

# Rule to compile the flecs library from the distr directory
distr/flecs.o: distr/flecs.c
	@echo "==> Compiling $< -> $@"
	$(CC) $(CFLAGS) -c $< -o $@

# Phony target for cleaning up all generated files
clean:
	@echo "==> Cleaning up build artifacts"
	rm -f *.o distr/*.o $(TARGET_WASM) $(WIT_GENERATED_C_SRC) $(WIT_GENERATED_H) $(WIT_GENERATED_COMPONENT_TYPE_OBJ)
